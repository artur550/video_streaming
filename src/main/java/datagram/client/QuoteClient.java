/* * Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * *   - Redistributions of source code must retain the above copyright *     notice, this list of conditions and the following disclaimer. * *   - Redistributions in binary form must reproduce the above copyright *     notice, this list of conditions and the following disclaimer in the *     documentation and/or other materials provided with the distribution. * *   - Neither the name of Oracle or the names of its *     contributors may be used to endorse or promote products derived *     from this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package datagram.client;import javax.sound.sampled.*;import java.io.*;import java.net.*;public class QuoteClient {//    private static StringBuilder sb = new StringBuilder();    public static void main(String[] args) throws IOException, LineUnavailableException {        DatagramSocket socket = new DatagramSocket();//        String received = new String();//        FileOutputStream fileOutputStream =//                new FileOutputStream(new File("C:\\Users\\Artur_Wojciechowski\\Desktop\\recording.au"));        byte[] buf = new byte[1024];        InputStream inputStream = new ByteArrayInputStream(buf);        final AudioFormat audioFormat =                new AudioFormat(44100, 16, 2, true, true);        AudioInputStream audioInputStream = new AudioInputStream(inputStream,audioFormat,buf.length);        SourceDataLine sourceDataLine = AudioSystem.getSourceDataLine(audioFormat);        sourceDataLine.open(audioFormat);        sourceDataLine.start();        int bytesRead = 0;        InetAddress address = InetAddress.getByName("10.30.1.160");        while (bytesRead > -1){            DatagramPacket packet = new DatagramPacket(buf, buf.length, address, 4445);            socket.send(packet);            packet = new DatagramPacket(buf, buf.length);            socket.receive(packet);            //fileOutputStream.write(packet.getData(), 0, packet.getLength());            try {                bytesRead = audioInputStream.read(packet.getData());//                if (bytesRead == -1) break;                System.out.print(bytesRead);                sourceDataLine.write(packet.getData(), 0, bytesRead);            } catch (IOException e) {                e.printStackTrace();            }        }        sourceDataLine.drain();        sourceDataLine.stop();        sourceDataLine.close();        audioInputStream.close();        socket.close();//        System.out.println(sb.toString());    }}