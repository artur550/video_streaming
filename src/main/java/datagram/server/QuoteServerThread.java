/* * Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * *   - Redistributions of source code must retain the above copyright *     notice, this list of conditions and the following disclaimer. * *   - Redistributions in binary form must reproduce the above copyright *     notice, this list of conditions and the following disclaimer in the *     documentation and/or other materials provided with the distribution. * *   - Neither the name of Oracle or the names of its *     contributors may be used to endorse or promote products derived *     from this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package datagram.server;import java.io.*;import java.net.*;import java.nio.charset.Charset;import java.util.Arrays;import java.util.logging.Level;import java.util.logging.Logger;public class QuoteServerThread extends Thread {    private DatagramSocket socket = null;    private boolean moreQuotes = true;    private static Logger logger = Logger.getLogger("Logging");    static final int BUFFER = 256;    private static InputStream inputStream = null;    public QuoteServerThread() throws IOException {        this("QS-1");    }    public QuoteServerThread(String name) throws IOException {        super(name);        socket = new DatagramSocket(4445);        try {            inputStream = new FileInputStream("input.txt");        } catch (FileNotFoundException e) {            System.err.println("Could not open quote file. Serving time instead.");        }    }    private static byte[] getBufferArray() throws IOException {        if(inputStream.available()<BUFFER && inputStream.available()>0) {            return new byte[inputStream.available()];        } else return new byte[BUFFER];    }    @Override    public void run() {        while (moreQuotes) {            try {                byte[] buf = getBufferArray();                if(inputStream.available()<BUFFER && inputStream.available()>0) {                    buf = new byte[inputStream.available()];                } else buf = new byte[BUFFER];                DatagramPacket packet = new DatagramPacket(buf, buf.length);                socket.receive(packet);                buf = getNextQuote();                InetAddress address = packet.getAddress();                int port = packet.getPort();                if (moreQuotes) {                    packet = new DatagramPacket(buf, buf.length, address, port);                } else {                    packet = new DatagramPacket(new byte[0], 0, address, port);                    inputStream.close();                }                socket.send(packet);            } catch (IOException e) {                logger.log(Level.WARNING,e.getLocalizedMessage());            }        }        socket.close();    }    private byte[] getNextQuote() throws IOException{        byte[] buf =null;        try {            buf = getBufferArray();            moreQuotes = (inputStream.read(buf) <= 0)?false:true;        } catch (IOException e) {            logger.log(Level.WARNING, "IOException occurred in server." + e.getLocalizedMessage());        }        return buf;    }}