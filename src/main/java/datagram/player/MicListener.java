package datagram.player;import com.sun.media.sound.AuFileWriter;import javax.sound.sampled.*;import javax.sound.sampled.AudioFormat.Encoding;import javax.sound.sampled.spi.AudioFileWriter;import java.io.*;import java.lang.reflect.Type;import java.nio.file.spi.FileTypeDetector;import static java.lang.System.out;public class MicListener {    final static private File fileOut = new File("C:\\Users\\Artur_Wojciechowski\\Desktop\\recording.au");//    final static int BUFFER_SIZE=2048;    static boolean stopStream=false;    public MicListener(){}    public static void listen () {//        for(Mixer.Info i: AudioSystem.getMixerInfo()){//            out.println(i.getName()+" >> "+i.getDescription() + " >> " + i.getVendor());//        }//        AudioFileFormat.Type.AU        final AudioFormat audioFormat =                new AudioFormat(44100, 16, 1, true, true);//                Encoding.PCM_SIGNED, 44100, 16, 1, 1, 44100, false);//        DataLine.Info info = new DataLine.Info(TargetDataLine.class, audioFormat);//        final SourceDataLine sourceDataLine = AudioSystem.getSourceDataLine(audioFormat);//        sourceDataLine.open();//        sourceDataLine.start();        final Thread thread = new Thread() {            @Override            public void run() {            try {//              DataOutputStream out = new DataOutputStream(server.getOutputStream());                FileOutputStream fos = new FileOutputStream(fileOut);//                InputStream bais = new ByteArrayInputStream(new byte[BUFFER_SIZE]);//                AudioInputStream ais = new AudioInputStream(bais,audioFormat,BUFFER_SIZE);//                byte[] data = new byte[BUFFER_SIZE];//                AudioSystem.write(ais, AudioFileFormat.Type.AU, fileOut);//                int bytesRead = 0;                DataLine.Info micInfo = new DataLine.Info(TargetDataLine.class,audioFormat);                TargetDataLine mic = (TargetDataLine) AudioSystem.getLine(micInfo);                mic.open(audioFormat);                if(!AudioSystem.isLineSupported(micInfo)) throw                        new LineUnavailableException("Line is not supported");                byte tmpBuff[] = new byte[mic.getBufferSize()/5];                mic.start();                while(!stopStream) {                    out.println("Reading from mic.");                    int count = mic.read(tmpBuff,0,tmpBuff.length);                    if (count > 0){                        out.println("Writing buffer to server.");                        AudioSystem.write(new AudioInputStream(mic), AudioFileFormat.Type.AU, fos);                        fos.write(tmpBuff, 0, count);                    }                }                mic.drain();                mic.close();                fos.close();//                ais.close();//                bais.close();//                sourceDataLine.drain();//                sourceDataLine.close();            } catch (IOException| LineUnavailableException e) {                e.printStackTrace();            }            }        };        thread.start();        thread.run();    //    Thread.sleep(5000);//        sourceDataLine.stop();//        sourceDataLine.close();    }    public static void main(String[] args) throws Exception {        MicListener listener = new MicListener();        listener.listen();    }}