package datagram.player;import javax.sound.sampled.*;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.Serializable;import java.net.URL;import java.net.URLConnection;public class StreamPlayer extends Thread implements Runnable {    private File fileIn;    public StreamPlayer(File url) {        this.fileIn = url;    }    @Override    public void run() {        try {            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(fileIn);            int bytesPerFrame = audioInputStream.getFormat().getFrameSize();            if (bytesPerFrame == AudioSystem.NOT_SPECIFIED) bytesPerFrame = 1;            AudioFormat audioFormat = audioInputStream.getFormat();            SourceDataLine sourceDataLine = AudioSystem.getSourceDataLine(audioFormat);            sourceDataLine.open(audioFormat);            sourceDataLine.start();            byte[] data = new byte[4096];            int nBytesRead = 0, nBytesWritten = 0;            while (nBytesRead != -1) {                nBytesRead = audioInputStream.read(data, 0, data.length);                if (nBytesRead != -1) nBytesWritten = sourceDataLine.write(data, 0, nBytesRead);            }//            LineListener myListener = new LineListener() {//                @Override//                public void update(LineEvent event) {////                }//            };//            sourceDataLine.addLineListener(myListener);            sourceDataLine.drain();            sourceDataLine.stop();            sourceDataLine.close();            audioInputStream.close();        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {            e.printStackTrace();        }    }}